/**
 * Stack Overflow For Teams Read APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { string } from '../schema';
import { BaseController } from './baseController';

export class PostsController extends BaseController {
  /**
   * @param postIds
   * @return Response from the API call
   */
  async getAllPosts(
    postIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ postIds: [postIds, string()] });
    req.appendTemplatePath`/posts/${mapped.postIds}`;
    return req.call(requestOptions);
  }

  /**
   * @param postIds
   * @return Response from the API call
   */
  async getPostsByIDs(
    postIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ postIds: [postIds, string()] });
    req.appendTemplatePath`/posts/${mapped.postIds}`;
    return req.call(requestOptions);
  }

  /**
   * @param postIds
   * @return Response from the API call
   */
  async getCommentsByPostIDs(
    postIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ postIds: [postIds, string()] });
    req.appendTemplatePath`/posts/${mapped.postIds}/comments`;
    return req.call(requestOptions);
  }

  /**
   * @param postId
   * @return Response from the API call
   */
  async renderCommentByPostID(
    postId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({ postId: [postId, string()] });
    req.appendTemplatePath`/posts/${mapped.postId}/comments/render`;
    return req.call(requestOptions);
  }

  /**
   * @param postIds
   * @return Response from the API call
   */
  async getRevisionsOfPostsByIDs(
    postIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ postIds: [postIds, string()] });
    req.appendTemplatePath`/posts/${mapped.postIds}/revisions`;
    return req.call(requestOptions);
  }

  /**
   * @param postIds
   * @return Response from the API call
   */
  async getSuggestedEditsOfPostsByIDs(
    postIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ postIds: [postIds, string()] });
    req.appendTemplatePath`/posts/${mapped.postIds}/suggested-edits`;
    return req.call(requestOptions);
  }
}
