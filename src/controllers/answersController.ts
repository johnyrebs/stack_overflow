/**
 * Stack Overflow For Teams Read APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { string } from '../schema';
import { BaseController } from './baseController';

export class AnswersController extends BaseController {
  /**
   * @return Response from the API call
   */
  async getAllAnswers(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/answers');
    return req.call(requestOptions);
  }

  /**
   * @param answerIds
   * @return Response from the API call
   */
  async getAnswersByIDs(
    answerIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ answerIds: [answerIds, string()] });
    req.appendTemplatePath`/answers/${mapped.answerIds}`;
    return req.call(requestOptions);
  }

  /**
   * @param answerIds
   * @return Response from the API call
   */
  async getCommentsByAnswerIDs(
    answerIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ answerIds: [answerIds, string()] });
    req.appendTemplatePath`/answers/${mapped.answerIds}/comments`;
    return req.call(requestOptions);
  }

  /**
   * @param answerIds
   * @return Response from the API call
   */
  async getQuestionsByAnswerIDs(
    answerIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ answerIds: [answerIds, string()] });
    req.appendTemplatePath`/answers/${mapped.answerIds}/questions`;
    return req.call(requestOptions);
  }
}
