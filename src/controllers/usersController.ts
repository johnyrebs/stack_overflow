/**
 * Stack Overflow For Teams Read APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { string } from '../schema';
import { BaseController } from './baseController';

export class UsersController extends BaseController {
  /**
   * @return Response from the API call
   */
  async getAllUsers(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/users');
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getUsersByIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getAnswersByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/answers`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getBadgesByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/badges`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getCommentsByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/comments`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @param toUserId
   * @return Response from the API call
   */
  async getCommentsByUserIDsRepliedToUserID(
    userIds: string,
    toUserId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      userIds: [userIds, string()],
      toUserId: [toUserId, string()],
    });
    req.appendTemplatePath`/users/${mapped.userIds}/comments/${mapped.toUserId}`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getFavoritesByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/favorites`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getMentionsByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/mentioned`;
    return req.call(requestOptions);
  }

  /**
   * @param userId
   * @return Response from the API call
   */
  async getNetworkActivityByUserID(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/users/${mapped.userId}/network-activity`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getPostsByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/posts`;
    return req.call(requestOptions);
  }

  /**
   * @param userId
   * @return Response from the API call
   */
  async getPrivilegesByUserID(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/users/${mapped.userId}/privileges`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getQuestionsByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/questions`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getFeaturedQuestionsByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/questions/featured`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getQuestionsByUserIDsWithNoAnswer(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/questions/no-answers`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getQuestionsByUserIDsWithNoAcceptedAnswer(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/questions/unaccepted`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getUnansweredQuestionsByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/questions/unanswered`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getReputationChangesByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/reputation`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getReputationHistoryByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/reputation-history`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getSuggestedEditsByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/suggested-edits`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getTagsByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/tags`;
    return req.call(requestOptions);
  }

  /**
   * @param userId
   * @param tagsList
   * @return Response from the API call
   */
  async getTopAnswersOfUserIDForTags(
    userId: string,
    tagsList: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      userId: [userId, string()],
      tagsList: [tagsList, string()],
    });
    req.appendTemplatePath`/users/${mapped.userId}/tags/${mapped.tagsList}/top-answers`;
    return req.call(requestOptions);
  }

  /**
   * @param userId
   * @param tagsList
   * @return Response from the API call
   */
  async getTopQuestionsOfUserIDForTags(
    userId: string,
    tagsList: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      userId: [userId, string()],
      tagsList: [tagsList, string()],
    });
    req.appendTemplatePath`/users/${mapped.userId}/tags/${mapped.tagsList}/top-questions`;
    return req.call(requestOptions);
  }

  /**
   * @param userIds
   * @return Response from the API call
   */
  async getActionTimelinesByUserIDs(
    userIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userIds: [userIds, string()] });
    req.appendTemplatePath`/users/${mapped.userIds}/timeline`;
    return req.call(requestOptions);
  }

  /**
   * @param userId
   * @return Response from the API call
   */
  async getTopAnswerTagsByUserID(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/users/${mapped.userId}/top-answer-tags`;
    return req.call(requestOptions);
  }

  /**
   * @param userId
   * @return Response from the API call
   */
  async getTopQuestionTagsByUserID(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/users/${mapped.userId}/top-question-tags`;
    return req.call(requestOptions);
  }

  /**
   * @param userId
   * @return Response from the API call
   */
  async getTopTagsByUserID(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.appendTemplatePath`/users/${mapped.userId}/top-tags`;
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async getAllModerators(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/users/moderators');
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async getElectedModerators(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/users/moderators/elected');
    return req.call(requestOptions);
  }
}
