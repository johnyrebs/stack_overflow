/**
 * Stack Overflow For Teams Read APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { number, string } from '../schema';
import { BaseController } from './baseController';

export class SearchController extends BaseController {
  /**
   * @param pagesize
   * @param intitle  Some text that should appear in the title of the post.
   * @param tagged   Semi-colon delimited list of tags that the post should include.
   * @return Response from the API call
   */
  async search(
    pagesize: number,
    intitle: string,
    tagged: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/search');
    const mapped = req.prepareArgs({
      pagesize: [pagesize, number()],
      intitle: [intitle, string()],
      tagged: [tagged, string()],
    });
    req.query('pagesize', mapped.pagesize);
    req.query('intitle', mapped.intitle);
    req.query('tagged', mapped.tagged);
    return req.call(requestOptions);
  }

  /**
   * @param sort     activity | creation | votes | relevance
   * @param order    asc | desc
   * @param fromdate refers to the creation date of the post
   * @param todate   refers to the creation date of the post
   * @param min      minimum value of the field specified by `sort` paramater.
   * @param max      maximum value of the field specified by `sort` paramater.
   * @param filter   Enable this filter to return just the total number of items.
   * @return Response from the API call
   */
  async searchAdvanced(
    sort: string,
    order: string,
    fromdate: string,
    todate: string,
    min: number,
    max: number,
    filter: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/search/advanced');
    const mapped = req.prepareArgs({
      sort: [sort, string()],
      order: [order, string()],
      fromdate: [fromdate, string()],
      todate: [todate, string()],
      min: [min, number()],
      max: [max, number()],
      filter: [filter, string()],
    });
    req.query('sort', mapped.sort);
    req.query('order', mapped.order);
    req.query('fromdate', mapped.fromdate);
    req.query('todate', mapped.todate);
    req.query('min', mapped.min);
    req.query('max', mapped.max);
    req.query('filter', mapped.filter);
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async searchSimilarQuestions(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/similar');
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async excerpts(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/search/excerpts');
    return req.call(requestOptions);
  }
}
